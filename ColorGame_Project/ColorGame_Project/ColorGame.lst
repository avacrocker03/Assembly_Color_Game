Microsoft (R) Macro Assembler Version 14.41.34120.0	    03/31/25 19:49:53
color_game.asm						     Page 1 - 1


				; color_game.asm
				; Authors: Ava Crocker & Maxwell Caiazza

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data
 00000000 00000000		startTime  DWORD 0
 00000004 00000000		currTime   DWORD 0
 00000008 00000000		currWord   DWORD 0
 0000000C 00000000		currColor  DWORD 0
 00000010 57 45 4C 43 4F	game1	 BYTE "WELCOME ", 0
	   4D 45 20 00
 00000019 54 4F 20 00		game2	 BYTE "TO ",0
 0000001D 54 48 45 20 00	game3	 BYTE "THE ",0
 00000022 43 4F 4C 4F 52	game4	 BYTE "COLOR ",0
	   20 00
 00000029 47 41 4D 45 00	game5	 BYTE "GAME",0
 0000002E 21 00			game6	 BYTE "!",0
 00000030 47 41 4D 45 20	gameover   BYTE "GAME OVER!", 0
	   4F 56 45 52 21
	   00
 0000003B 20 20 20 20 20	guessText  BYTE "        Guess: ", 0
	   20 20 20 47 75
	   65 73 73 3A 20
	   00
 0000004B  00000014 [		userGuess  BYTE 20 DUP(" "), 0
	    20
	   ] 00
 00000060 47 75 65 73 73	rules	 BYTE "Guess the COLOR of the text before the timer runs out! Press SPACE to start playing...", 0
	   20 74 68 65 20
	   43 4F 4C 4F 52
	   20 6F 66 20 74
	   68 65 20 74 65
	   78 74 20 62 65
	   66 6F 72 65 20
	   74 68 65 20 74
	   69 6D 65 72 20
	   72 75 6E 73 20
	   6F 75 74 21 20
	   50 72 65 73 73
	   20 53 50 41 43
	   45 20 74 6F 20
	   73 74 61 72 74
	   20 70 6C 61 79
	   69 6E 67 2E 2E
	   2E 00
 000000B7 7E 7E 7E 7E 7E	border	 BYTE "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",0
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 7E 7E 7E
	   7E 7E 00
 00000114 53 54 41 52 54	start      BYTE "STARTING GAME...", 0
	   49 4E 47 20 47
	   41 4D 45 2E 2E
	   2E 00
 00000125 20 00			space      BYTE " ",0
 00000127 0D 00			return     BYTE 13, 0
 00000129 52 45 44 00		redText    BYTE "RED", 0
 0000012D 59 45 4C 4C 4F	yellowText BYTE "YELLOW", 0
	   57 00
 00000134 47 52 45 45 4E	greenText  BYTE "GREEN", 0
	   00
 0000013A 42 4C 55 45 00	blueText   BYTE "BLUE", 0
 0000013F 50 55 52 50 4C	purpleText BYTE "PURPLE", 0
	   45 00
 00000146 42 4C 41 43 4B	blackText  BYTE "BLACK", 0
	   00
 0000014C 57 48 49 54 45	whiteText  BYTE "WHITE", 0
	   00
 00000152 47 52 41 59 00	grayText   BYTE "GRAY", 0
 00000157 00000129 R		colorText  DWORD OFFSET redText, OFFSET yellowText, OFFSET greenText, OFFSET blueText, OFFSET purpleText, OFFSET blackText, OFFSET whiteText, OFFSET grayText
	   0000012D R
	   00000134 R
	   0000013A R
	   0000013F R
	   00000146 R
	   0000014C R
	   00000152 R
 00000177 00000004		colorDisplay  DWORD red, yellow, green, blue, magenta, black, white, lightGray
	   0000000E
	   00000002
	   00000001
	   00000005
	   00000000
	   0000000F
	   00000007

 00000197 00000000		score      DWORD 0
 0000019B 53 63 6F 72 65	scoreStr   BYTE  "Score: ", 0
	   3A 20 00

 00000000			.code
 00000000			main PROC
				; Setting base background
 00000000  B8 0000008D		    mov     eax,lightMagenta + (gray * 16)
 00000005  E8 00000000 E	    call    SetTextColor
 0000000A  E8 00000000 E	    call    Clrscr            ; clear the screen
 0000000F  E8 00000000 E	    call    Crlf                ; new line

				; Setting up intro screen
 00000014  BA 000000B7 R	    mov	 edx, OFFSET border
 00000019  E8 00000000 E	    call	 WriteString
 0000001E  E8 00000000 E	    call	 Crlf
 00000023  B8 00000084		    mov    eax,red + (gray * 16)
 00000028  E8 00000000 E	    call   SetTextColor
 0000002D  BA 00000010 R	    mov    edx,OFFSET game1
 00000032  E8 00000000 E	    call   WriteString
 00000037  B8 0000008C		    mov	 eax, lightRed + (gray * 16)
 0000003C  E8 00000000 E	    call	 SetTextColor
 00000041  BA 00000019 R	    mov    edx,OFFSET game2
 00000046  E8 00000000 E	    call   WriteString
 0000004B  B8 0000008E		    mov	 eax, yellow + (gray * 16)
 00000050  E8 00000000 E	    call	 SetTextColor
 00000055  BA 0000001D R	    mov    edx,OFFSET game3
 0000005A  E8 00000000 E	    call   WriteString
 0000005F  B8 00000082		    mov	 eax, green + (gray * 16)
 00000064  E8 00000000 E	    call	 SetTextColor
 00000069  BA 00000022 R	    mov    edx,OFFSET game4
 0000006E  E8 00000000 E	    call   WriteString
 00000073  B8 00000081		    mov	 eax, blue + (gray * 16)
 00000078  E8 00000000 E	    call	 SetTextColor
 0000007D  BA 00000029 R	    mov    edx,OFFSET game5
 00000082  E8 00000000 E	    call   WriteString
 00000087  B8 00000085		    mov	 eax, magenta + (gray * 16)
 0000008C  E8 00000000 E	    call	 SetTextColor
 00000091  BA 0000002E R	    mov    edx,OFFSET game6
 00000096  E8 00000000 E	    call   WriteString
 0000009B  E8 00000000 E	    call	 Crlf
 000000A0  B8 0000008B		    mov	 eax, lightCyan + (gray * 16)
 000000A5  E8 00000000 E	    call	 SetTextColor
 000000AA  BA 00000060 R	    mov	 edx, OFFSET rules
 000000AF  E8 00000000 E	    call	 WriteString
 000000B4  E8 00000000 E	    call   Crlf
 000000B9  B8 0000008D		    mov	 eax, lightMagenta + (gray * 16)
 000000BE  E8 00000000 E	    call	 SetTextColor
 000000C3  BA 000000B7 R	    mov	 edx, OFFSET border
 000000C8  E8 00000000 E	    call	 WriteString
 000000CD  E8 00000000 E	    call	 Crlf
 000000D2  EB 00		    jmp    wait_start

 000000D4			wait_start:
				; Checking if user inputs space to start game

 000000D4  E8 00000000 E	    call  ReadChar

 000000D9  3C 20		    cmp   al, 20h
 000000DB  74 02		    je    start_game

 000000DD  EB F5		    jmp   wait_start

 000000DF			start_game:
				; Starting game

 000000DF  BA 00000125 R	    mov    edx, OFFSET space
 000000E4  E8 00000000 E	    call   WriteString
 000000E9  E8 00000000 E	    call	 Crlf
 000000EE  B8 0000008F		    mov	 eax, white + (gray * 16)
 000000F3  E8 00000000 E	    call	 SetTextColor
 000000F8  BA 00000114 R	    mov	 edx, OFFSET start
 000000FD  E8 00000000 E	    call	 WriteString
 00000102  E8 00000000 E	    call	 Crlf
 00000107  BA 00000125 R	    mov    edx, OFFSET space
 0000010C  E8 00000000 E	    call   WriteString
 00000111  E8 00000000 E	    call	 Crlf

				    ; Starting 1 min timer
 00000116  E8 00000000 E	    call   GetMseconds
 0000011B  A3 00000000 R	    mov    startTime, eax

				    ; Initialize random number
 00000120  E8 00000000 E	    call Randomize

 00000125  EB 00		    jmp    show_words
				    
 00000127			    show_words:
				    ; Displaying colors

 00000127  BA 00000127 R	       mov    edx, OFFSET return
 0000012C  E8 00000000 E	       call   WriteString

				       ; Random color
 00000131  B8 00000008		       mov    eax, 8
 00000136  E8 00000000 E	       call   RandomRange
 0000013B  8B D8		       mov    ebx, eax

				       ; Getting color from array
 0000013D  8B 04 9D		       mov    eax, [colorDisplay + ebx*4]
	   00000177 R
 00000144  BA 00000008		       mov    edx, gray
 00000149  C1 E2 04		       shl    edx, 4
 0000014C  03 C2		       add    eax, edx
 0000014E  E8 00000000 E	       call   SetTextColor

				       ; Saving current color text for later comparison
 00000153  8B 04 9D		       mov    eax, [colorText + ebx*4]
	   00000157 R
 0000015A  A3 0000000C R	       mov    currColor, eax


				       ; Random Text
 0000015F  B8 00000008		       mov   eax, 8
 00000164  E8 00000000 E	       call   RandomRange
 00000169  8B D8		       mov    ebx, eax

				       ; Getting color text from array
 0000016B  8B 04 9D		       mov    eax, [colorText + ebx*4]
	   00000157 R
 00000172  8B D0		       mov    edx, eax
 00000174  A3 00000008 R	       mov    currWord, eax
 00000179  E8 00000000 E	       call   WriteString

				       ; Getting user input
 0000017E  B8 0000008F		       mov   eax, white + (gray * 16)
 00000183  E8 00000000 E	       call  SetTextColor
 00000188  BA 0000003B R	       mov   edx, OFFSET guessText
 0000018D  E8 00000000 E	       call  WriteString

 00000192  BA 0000004B R	       mov   edx, OFFSET userGuess
 00000197  B9 00000014		       mov   ecx, 20
 0000019C  E8 00000000 E	       call  ReadString

				       ; COMPARING STRINGS SECTION
				       ;loading strings
 000001A1  8B 35 0000000C R	       mov esi, [currColor]  ; Point to first string
 000001A7  BF 0000004B R	       mov edi, OFFSET userGuess  ; Point to second string
				       
				       ;looping through strings
 000001AC			       compare_loop:
 000001AC  8A 06		            mov al, [esi]  ; Load currColor
 000001AE  8A 1F		            mov bl, [edi]  ; Load from userGuess
 000001B0  3A C3		            cmp al, bl
 000001B2  75 11		            jne not_equal  ; not equal -- jumps out of loop here
				    
 000001B4  3C 00		            cmp al, 0      ; Check for null terminator
 000001B6  74 04		            je strings_match ; If null terminator reached, strings match
				    
 000001B8  46			            inc esi        ; Move to next in currColor
 000001B9  47			            inc edi        ; userGuess
 000001BA  EB F0		            jmp compare_loop  ;normal loop proc

 000001BC			        strings_match:
 000001BC  83 05 00000197 R	            add score, 1  ; Increment score
	   01
 000001C3  EB 00		            jmp not_equal

 000001C5			        not_equal: ;not equal -- jumps past inc

				       ; TODO: have program pause and take user input for guess (ps. set breakpoint to line 199 to have prog continuously run and not have to step)
				       ;       compare currColor to the userGuess (i believe you have to compare byte by byte lmk if u want help on this)
				       ;       make two loops, right and wrong, jump to whichever based off guess
				       ;       add score 1 to score if right
				       ;       display score once timer runs out
				       ;       can also display time if you want


				       ; Timer
 000001C5  E8 00000000 E	       call  GetMseconds
 000001CA  2B 05 00000000 R	       sub   eax, startTime
 000001D0  3D 00007530		       cmp   eax, 30000 ; set shorter for testing purposes, change to 60000 for 1 min

 000001D5  0F 8C FFFFFF4C	       jl    show_words
 000001DB  EB 00		    jmp   game_over

 000001DD			game_over:
				; Displaying game over & exiting program
 000001DD  BA 00000125 R	    mov    edx, OFFSET space
 000001E2  E8 00000000 E	    call   WriteString
 000001E7  E8 00000000 E	    call	 Crlf
 000001EC  BA 00000125 R	    mov    edx, OFFSET space
 000001F1  E8 00000000 E	    call   WriteString
 000001F6  E8 00000000 E	    call	 Crlf
 000001FB  B8 0000008F		    mov	 eax, white + (gray * 16)
 00000200  E8 00000000 E	    call	 SetTextColor
 00000205  BA 00000030 R	    mov	 edx, OFFSET gameover
 0000020A  E8 00000000 E	    call	 WriteString
 0000020F  E8 00000000 E	    call	 Crlf
				        

 00000214  BA 0000019B R	    mov edx, OFFSET scoreStr
 00000219  E8 00000000 E	    call     WriteString
 0000021E  A1 00000197 R	    mov eax, score
 00000223  E8 00000000 E	    call     WriteDec
 00000228  E8 00000000 E	    call     Crlf
				    exit
 0000022D  6A 00	   *	    push   +000000000h
 0000022F  E8 00000000 E   *	    call   ExitProcess

 00000234			main ENDP
				END main


Microsoft (R) Macro Assembler Version 14.41.34120.0	    03/31/25 19:49:53
color_game.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001A3 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000234 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000234 Public STDCALL
  wait_start . . . . . . . . . .	L Near	 000000D4 _TEXT	
  start_game . . . . . . . . . .	L Near	 000000DF _TEXT	
  show_words . . . . . . . . . .	L Near	 00000127 _TEXT	
  compare_loop . . . . . . . . .	L Near	 000001AC _TEXT	
  strings_match  . . . . . . . .	L Near	 000001BC _TEXT	
  not_equal  . . . . . . . . . .	L Near	 000001C5 _TEXT	
  game_over  . . . . . . . . . .	L Near	 000001DD _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
blackText  . . . . . . . . . . .	Byte	 00000146 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blueText . . . . . . . . . . . .	Byte	 0000013A _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
border . . . . . . . . . . . . .	Byte	 000000B7 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
colorDisplay . . . . . . . . . .	DWord	 00000177 _DATA	
colorText  . . . . . . . . . . .	DWord	 00000157 _DATA	
currColor  . . . . . . . . . . .	DWord	 0000000C _DATA	
currTime . . . . . . . . . . . .	DWord	 00000004 _DATA	
currWord . . . . . . . . . . . .	DWord	 00000008 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
game1  . . . . . . . . . . . . .	Byte	 00000010 _DATA	
game2  . . . . . . . . . . . . .	Byte	 00000019 _DATA	
game3  . . . . . . . . . . . . .	Byte	 0000001D _DATA	
game4  . . . . . . . . . . . . .	Byte	 00000022 _DATA	
game5  . . . . . . . . . . . . .	Byte	 00000029 _DATA	
game6  . . . . . . . . . . . . .	Byte	 0000002E _DATA	
gameover . . . . . . . . . . . .	Byte	 00000030 _DATA	
grayText . . . . . . . . . . . .	Byte	 00000152 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
greenText  . . . . . . . . . . .	Byte	 00000134 _DATA	
green  . . . . . . . . . . . . .	Number	 00000002h   
guessText  . . . . . . . . . . .	Byte	 0000003B _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
purpleText . . . . . . . . . . .	Byte	 0000013F _DATA	
redText  . . . . . . . . . . . .	Byte	 00000129 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
return . . . . . . . . . . . . .	Byte	 00000127 _DATA	
rules  . . . . . . . . . . . . .	Byte	 00000060 _DATA	
scoreStr . . . . . . . . . . . .	Byte	 0000019B _DATA	
score  . . . . . . . . . . . . .	DWord	 00000197 _DATA	
space  . . . . . . . . . . . . .	Byte	 00000125 _DATA	
startTime  . . . . . . . . . . .	DWord	 00000000 _DATA	
start  . . . . . . . . . . . . .	Byte	 00000114 _DATA	
userGuess  . . . . . . . . . . .	Byte	 0000004B _DATA	
whiteText  . . . . . . . . . . .	Byte	 0000014C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellowText . . . . . . . . . . .	Byte	 0000012D _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
